import React, { useState } from 'react';
import Card from './common/Card';
import Button from './common/Button';
import { analyzeFootageSummary, searchTactics } from '../services/geminiService';
import { VideoIcon, SparklesIcon, SearchIcon } from './common/icons';
import { SearchResult } from '../types';

const FootageAnalyzer: React.FC = () => {
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<string[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [fileName, setFileName] = useState<string | null>(null);

  const [searchQuery, setSearchQuery] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [searchResult, setSearchResult] = useState<SearchResult | null>(null);
  const [searchError, setSearchError] = useState<string | null>(null);

  const handleAnalyze = async () => {
    setIsAnalyzing(true);
    setError(null);
    setAnalysisResult([]);
    setFileName('Match_Day_vs_Warriors.mp4');

    // This is a summary that would hypothetically be generated by a video indexing service
    const footageSummary = `
      Blue Team vs. Red Team (Rugby Match):
      - 0-15min: Blue Team dominates territory using smart tactical kicking from the fly-half.
      - 18min: TRY! Blue Team scores after a well-executed line break and several quick phases.
      - 28min: Yellow card for Red Team's flanker for a high tackle.
      - 45-60min: Red Team applies pressure at the scrum, winning multiple penalties. Blue team struggles to exit their half.
      - 65min: KEY TURNOVER by Blue Team's openside flanker at the breakdown halts a promising Red Team attack.
      - 72min: Red Team executes a perfect rolling maul from a lineout, gaining 20 meters.
      - 78min: TRY! Red Team scores in the corner after spreading the ball wide and creating an overlap.
    `;

    try {
      const result = await analyzeFootageSummary(footageSummary);
      setAnalysisResult(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unknown error occurred.');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setSearchError('Please enter a search query.');
      return;
    }
    setIsSearching(true);
    setSearchError(null);
    setSearchResult(null);

    try {
      const result = await searchTactics(searchQuery);
      setSearchResult(result);
    } catch (err) {
      setSearchError(err instanceof Error ? err.message : 'An unknown error occurred.');
    } finally {
      setIsSearching(false);
    }
  };


  return (
    <div className="space-y-6">
      <Card>
        <div className="flex flex-col items-center text-center">
          <VideoIcon className="w-16 h-16 text-brand-light mb-4" />
          <h2 className="text-2xl font-bold text-brand-text">Analyze Match Footage</h2>
          <p className="text-brand-light mt-2 max-w-lg">
            Simulate analyzing match footage to automatically identify key tactical moments from a pre-written summary.
          </p>
          <div className="mt-6">
            <Button onClick={handleAnalyze} isLoading={isAnalyzing} disabled={isAnalyzing}>
              {isAnalyzing ? 'Analyzing...' : 'Analyze Sample Footage'}
            </Button>
          </div>
        </div>
      </Card>
      
      {isAnalyzing && (
        <Card>
          <div className="flex flex-col items-center justify-center gap-4 p-4">
            <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-brand-cyan"></div>
            <p className="text-brand-light">AI is analyzing key moments from <span className="font-mono">{fileName}</span>...</p>
          </div>
        </Card>
      )}

      {error && (
        <Card className="bg-red-900 border border-red-500">
          <h3 className="font-bold text-red-300">Analysis Failed</h3>
          <p className="text-red-300">{error}</p>
        </Card>
      )}

      {analysisResult.length > 0 && (
        <Card>
          <h3 className="text-xl font-bold mb-4 text-brand-cyan">Key Tactical Moments from <span className="font-mono text-lg">{fileName}</span></h3>
          <ul className="space-y-3">
            {analysisResult.map((moment, index) => (
              <li key={index} className="p-3 bg-brand-primary rounded-md flex items-start gap-3">
                <span className="text-brand-cyan font-bold">{index + 1}.</span>
                <p className="text-brand-text">{moment}</p>
              </li>
            ))}
          </ul>
        </Card>
      )}

      <Card>
        <div className="flex items-center gap-4 mb-4">
          <SparklesIcon className="w-8 h-8 text-brand-cyan" />
          <h2 className="text-2xl font-bold text-brand-text">Tactical Search</h2>
        </div>
        <p className="text-brand-light mb-4">
          Ask any tactical question. The AI will search for up-to-date information to give you the latest insights on teams, players, and strategies.
        </p>
        <div className="flex flex-col sm:flex-row gap-2">
           <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="e.g., What are effective strategies against a 2-3 zone defense in basketball?"
            className="w-full p-3 bg-brand-primary border-2 border-brand-accent rounded-md focus:outline-none focus:ring-2 focus:ring-brand-cyan text-brand-text flex-grow"
            onKeyDown={(e) => {if (e.key === 'Enter' && !isSearching) { handleSearch(); }}}
            disabled={isSearching}
          />
          <Button onClick={handleSearch} isLoading={isSearching} disabled={isSearching || !searchQuery.trim()}>
            <SearchIcon className="w-5 h-5" />
            Search
          </Button>
        </div>
      </Card>

      {isSearching && (
        <Card>
          <div className="flex flex-col items-center justify-center gap-4 p-4">
            <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-brand-cyan"></div>
            <p className="text-brand-light">Searching for tactical insights...</p>
          </div>
        </Card>
      )}

      {searchError && (
        <Card className="bg-red-900 border border-red-500">
          <h3 className="font-bold text-red-300">Search Failed</h3>
          <p className="text-red-300">{searchError}</p>
        </Card>
      )}

      {searchResult && (
        <Card>
          <h3 className="text-xl font-bold mb-4 text-brand-cyan">Search Result</h3>
          <div className="text-brand-text space-y-4">
             <p className="whitespace-pre-wrap">{searchResult.answer}</p>
          </div>

          {searchResult.sources.length > 0 && (
            <div className="mt-6 pt-4 border-t border-brand-accent">
              <h4 className="font-semibold text-brand-light mb-2">Sources:</h4>
              <ul className="space-y-2">
                {searchResult.sources.map((source, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <span className="text-brand-cyan mt-1">&#8227;</span>
                    <a
                      href={source.web.uri}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-brand-cyan hover:underline break-all"
                    >
                      {source.web.title}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </Card>
      )}
    </div>
  );
};

export default FootageAnalyzer;